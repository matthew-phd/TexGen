# This file was automatically generated by SWIG (http://www.swig.org).
<<<<<<< HEAD
# Version 3.0.12
=======
# Version 2.0.10
>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

<<<<<<< HEAD
from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Embedded')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Embedded')
    _Embedded = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
=======


from sys import version_info
if version_info >= (2,6,0):
>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Embedded', [dirname(__file__)])
        except ImportError:
            import _Embedded
            return _Embedded
<<<<<<< HEAD
        try:
            _mod = imp.load_module('_Embedded', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
=======
        if fp is not None:
            try:
                _mod = imp.load_module('_Embedded', fp, pathname, description)
            finally:
                fp.close()
            return _mod
>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
    _Embedded = swig_import_helper()
    del swig_import_helper
else:
    import _Embedded
<<<<<<< HEAD
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
=======
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
<<<<<<< HEAD
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
=======
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
<<<<<<< HEAD
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

=======
except AttributeError:
    class _object : pass
    _newclass = 0


>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
<<<<<<< HEAD

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Embedded.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _Embedded.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Embedded.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Embedded.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Embedded.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Embedded.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Embedded.SwigPyIterator_copy(self)

    def next(self):
        return _Embedded.SwigPyIterator_next(self)

    def __next__(self):
        return _Embedded.SwigPyIterator___next__(self)

    def previous(self):
        return _Embedded.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Embedded.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Embedded.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Embedded.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Embedded.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Embedded.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Embedded.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Embedded.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
=======
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Embedded.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _Embedded.SwigPyIterator_value(self)
    def incr(self, n=1): return _Embedded.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _Embedded.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _Embedded.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _Embedded.SwigPyIterator_equal(self, *args)
    def copy(self): return _Embedded.SwigPyIterator_copy(self)
    def next(self): return _Embedded.SwigPyIterator_next(self)
    def __next__(self): return _Embedded.SwigPyIterator___next__(self)
    def previous(self): return _Embedded.SwigPyIterator_previous(self)
    def advance(self, *args): return _Embedded.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _Embedded.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _Embedded.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _Embedded.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _Embedded.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _Embedded.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _Embedded.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
SwigPyIterator_swigregister = _Embedded.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


<<<<<<< HEAD
def GetRenderWindow(*args):
    return _Embedded.GetRenderWindow(*args)
GetRenderWindow = _Embedded.GetRenderWindow

def CreateRenderWindow(*args):
    return _Embedded.CreateRenderWindow(*args)
CreateRenderWindow = _Embedded.CreateRenderWindow

def DeleteRenderWindow(*args):
    return _Embedded.DeleteRenderWindow(*args)
DeleteRenderWindow = _Embedded.DeleteRenderWindow

def Refresh(*args):
    return _Embedded.Refresh(*args)
Refresh = _Embedded.Refresh

def ReceivePythonOutput(Output, Type):
    return _Embedded.ReceivePythonOutput(Output, Type)
=======
def GetRenderWindow(WindowName=""):
  return _Embedded.GetRenderWindow(WindowName)
GetRenderWindow = _Embedded.GetRenderWindow

def CreateRenderWindow(WindowName=""):
  return _Embedded.CreateRenderWindow(WindowName)
CreateRenderWindow = _Embedded.CreateRenderWindow

def DeleteRenderWindow(WindowName=""):
  return _Embedded.DeleteRenderWindow(WindowName)
DeleteRenderWindow = _Embedded.DeleteRenderWindow

def Refresh(WindowName=""):
  return _Embedded.Refresh(WindowName)
Refresh = _Embedded.Refresh

def ReceivePythonOutput(*args):
  return _Embedded.ReceivePythonOutput(*args)
>>>>>>> d6c0c9a7665128b44294f73cac5a6b6400917f06
ReceivePythonOutput = _Embedded.ReceivePythonOutput
# This file is compatible with both classic and new-style classes.


